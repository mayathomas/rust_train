// 给你一个整数数组 nums，找到其中最长严格递增子序列的长度。
// 子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。
// 示例
// 示例 1：
// 输入：nums = [10,9,2,5,3,7,101,18]
// 输出：4
// 解释：最长递增子序列是 [2,3,7,101]，因此长度为 4。
// 示例 2：
// 输入：nums = [0,1,0,3,2,3]
// 输出：4
// 解释：最长递增子序列是 [0,1,2,3]，因此长度为 4。
// 示例 3：
// 输入：nums = [7,7,7,7,7,7,7]
// 输出：1
// 解释：最长递增子序列是 [7]，因此长度为 1。

//对于任意 j < i, 如果nums[j] < nums[i], dp[i] = max(dp[i], dp[j] + 1)
fn max_subseq(nums: &Vec<i32>) -> i32 {
    let mut dp = vec![1; nums.len()];
    for i in 0..nums.len() {
        for j in 0..i {
            if nums[j] < nums[i] {
                println!("{i} {} {} {}", dp[i], dp[j], dp[i].max(dp[j] + 1));
                dp[i] = dp[i].max(dp[j] + 1);
            }
        }
    }
    println!("{:?}", dp);
    *dp.iter().max().unwrap()
}

fn main() {
    let a = [10,15,2,5,3,7,13,12];
    println!("{}", max_subseq(&a.to_vec()));
}
